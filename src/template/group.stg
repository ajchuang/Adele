delimiters "$", "$"
// change delimiters to $
typeInitMap ::= [
    "int":      "0",
    "float":    "0.0",
    "bool":     "false",
    default:    "null" // anything other than an atomic type
]

assign(lhs, rhs) ::= "$lhs$ = $rhs$"
add(lhs, rhs) ::= "$lhs$ + $rhs$"
overlay(fg, bg, r, c) ::= "$fg$.overlay($bg$,$r$,$c$)"
at(fg, r, c) ::= "$fg$.at($r$,$c$)"

funcdef(fname, params, body) ::= <<
var $fname$ = function($params; separator=", "$) {
    $body; separator="\n"$
};
>>

funccall(fname, params) ::= <<$fname$($params; separator=", "$)>>

vardecl(vtype, vname, value) ::= "var $vname$$init(value)$"

init(value) ::= "$if(value)$ = $value$$endif$"

ifstmt(expr, body) ::= <<
if ($expr$) {
    $body; separator="\n"$
}
>>

whilestmt(expr, body) ::= <<
while ($expr$) {
    $body; separator="\n"$
}
>>


html(jssource) ::= <<
<html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="$jssource$"></script>
<body>
</body>
</html>
>>

befprog() ::= <<
var Pixel = function() {
  this.chr = '';
};

var Graph = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.buffer = [];
  for (var i = 0; i < this.height; i++) {
    this.buffer[i] = [];
    for (var j = 0; j < this.width; j++) {
      this.buffer[i][j] = new Pixel();
    }
  }
  this.overlay = function(bg, r, c) {
    for (var i = 0; i <this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        bg.buffer[i+r][j+c].chr = this.buffer[i][j].chr;
      }
    }
  }
  this.at = function(r,c) {
    this.overlay(canvas, r, c);
  }
};

var Canvas = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.grid = cfg.g;
  this.buffer = [];
  this.init = function () {
    jQuery(document.body).css('width', this.width*this.grid +'px').css('height', this.heigth*this.grid +'px');

    var pixeldiv = jQuery('<div>').addClass('pixel').css({
      "width": this.grid+'px',
      "height": this.grid+'px',
      "font-size": this.grid*.7+'px',
      "float": "left",
      "text-align": "center",
      "background-color": "#CFF"
    });

    for (var i = 0; i < this.height; i++) {
      this.buffer[i] = [];
      for (var j = 0; j < this.width; j++) {
        var p = new Pixel();
        p.div = pixeldiv.clone().addClass('row-'+i).addClass('col-'+j).appendTo(document.body);
        this.buffer[i][j] = p;
      }
    }
    this.draw();
  };
  this.draw = function () {
    for (var i = 0; i < this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        var p = this.buffer[i][j];
        p.div.html(p.chr);
      }
    }
  };
};

var canvas = new Canvas({
  w: 40,
  h: 30,
  g: 20,
});


//Convert string to graph
var str2graph = function (str) {
  str = String(str);
  var height = 1;
  var width = 0;
  var cw = 0;
  for (i in str) {
    if (str[i]=="\n") {
      height++;
      cw = 0;
    } else {
      cw++;
    }
  }
  if (cw>width) width = cw;

  var g = new Graph({w: width, h: height});
  var cr = 0, cc = 0;
  for (i in str) {
    if (str[i]=="\n") {
      cr++;
      cc = 0;
    } else {
      g.buffer[cr][cc].chr = str[i];
      cc++;
    }
  }
  return g;
};

var sleep = function (milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
      if ((new Date().getTime() - start) > milliseconds){
          break;
      }
  }
};

var print_str = function(r, c, str) {
  if (r==undefined || c==undefined || str==undefined) {
    r = 0; c = 0; str = "hello world";
  }
  var g = str2graph(str);
  g.at(r, c);
  canvas.draw();
};

var draw = function() {
  canvas.draw();
}

jQuery(document).ready(function(){
  canvas.init();
  main();
});

>>
