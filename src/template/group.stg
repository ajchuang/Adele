delimiters "$", "$"
// change delimiters to $
typeInitMap ::= [
    "int":      "0",
    "float":    "0.0",
    "bool":     "false",
    default:    "null" // anything other than an atomic type
]

assign(lhs, rhs) ::= "$lhs$ = $rhs$"
add(lhs, rhs) ::= "($lhs$) + ($rhs$)"
overlay(fg, bg, r, c) ::= "($fg$).overlay($bg$,$r$,$c$)"
at(fg, r, c) ::= "($fg$).at($r$,$c$)"
vatt(gu, gd) ::= "graph_vattach($gu$,$gd$)"
hatt(gl, gr) ::= "graph_hattach($gl$,$gr$)"
f2i(f) ::= "(($f$)|0)"

funcdef(fname, params, body) ::= <<
var $fname$ = function($params; separator=", "$) {
    $body; separator="\n"$
};
>>

funccall(fname, params) ::= <<$fname$($params; separator=", "$)>>

exports(fname) ::= <<exports.$fname$ = $fname$;>>

vardecl(vtype, vname, value) ::= "var $vname$$init(value)$"

//arraydecl(aname, len, initV) ::= "var $aname$ = function(){ var ar = []; for (var i=0; i<$len$; i++) ar[i]=$initV$;  return ar; }()"

arraydecl(aname, def, init) ::= "var $aname$ = function(){ var ar = $def$; $init$ return ar; }()"

arrayinit(dimen, varName) ::= "for (var $varName$ = 0; $varName$ < $dimen$; $varName$++)"

groupdef(gname, memberList) ::= "var $gname$ = new makeStruct(\"$memberList$\")"

init(value) ::= "$if(value)$ = $value$$endif$"

ifstmt(expr, body) ::= <<
if ($expr$) {
    $body; separator="\n"$
}
>>

whilestmt(expr, body) ::= <<
while ($expr$) {
    $body; separator="\n"$
}
>>


html() ::= <<
<html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://cdn.socket.io/socket.io-1.3.5.js"></script>
<script>


var Canvas = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.grid = cfg.g;
  this.screen = [];
  this.pixel = [];

  this.init = function () {
    jQuery(document.body).css('width', this.width*this.grid +'px').css('height', this.heigth*this.grid +'px');

    var pixeldiv = jQuery('<div>').addClass('pixel').css({
      "width": this.grid+'px',
      "height": this.grid+'px',
      "font-size": this.grid*.9+'px',
      "float": "left",
      "text-align": "center"
    });

    for (var i = 0; i < this.height; i++) {
      this.pixel[i] = [];
      this.screen[i] = [];
      for (var j = 0; j < this.width; j++) {
        this.screen[i][j] = pixeldiv.clone().addClass('row-'+i).addClass('col-'+j).appendTo(document.body);
      }
    }
  };
  this.draw = function () {
    for (var i = 0; i < this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        var p = this.pixel[i][j];
        this.screen[i][j].html(p.chr);
        this.screen[i][j].css('color', p.color);
        this.screen[i][j].css('background-color', p.backgroundColor);
        this.screen[i][j].css('font-family', p.font);
      }
    }
  };

};

var canvas = new Canvas({
  w: 40,
  h: 30,
  g: 20,
});

var WebSocket = window.WebSocket || window.MozWebSocket;


jQuery(document).ready(function(){
  canvas.init();
  var socket = io('http://127.0.0.1:8888');
  socket.on('draw', function(data) {
    canvas.pixel = data;
    canvas.draw();
    console.log('draw!',new Date().getTime());
  });
  jQuery(document).on("keydown", function(e){
    console.log('keypress', e.which);
    socket.emit('keypress', {key: e.which});
  });

});

</script>


<body>
</body>
</html>

>>

befprog() ::= <<
var clone = function (a) {
   return JSON.parse(JSON.stringify(a));
};

var Pixel = function() {
  this.chr = '';
  this.color = 'red';
  this.backgroundColor = '#FFC';
  this.font = 'Monaco';
};

function initArray(dimens) {
    nextDimen = [];

    for (var j = dimens.length - 2; j >= 0; j--) {
        curDimen = [];
        var n = parseInt(dimens[j]);
        for (var k = 0; k < n; k++) {
            curDimen.push(jQuery.extend(true, [], nextDimen));
        }
        nextDimen = curDimen;
    }

    return nextDimen;
}

function makeStruct(names) {
  var names = names.split(' ');
  var count = names.length;
  function constructor() {
    for (var i = 0; i < count; i++) {
      if (names[i].indexOf("[") != -1)
      {
          varName = names[i].substring(0, names[i].indexOf("["));
          tmp = names[i].substring(names[i].indexOf("[") + 1, names[i].length - 1);
          dimens = tmp.split("][");
    
          this[varName] = initArray(dimens);
      }
      else {
          this[names[i]] = null;
      }
    }
  }
  return constructor;
}

var Graph = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.pixel = [];
  for (var i = 0; i < this.height; i++) {
    this.pixel[i] = [];
    for (var j = 0; j < this.width; j++) {
      this.pixel[i][j] = new Pixel();
    }
  }
  this.overlay = function(bg, r, c) {
    for (var i = 0; i <this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        if (i+r>=bg.height || j+c>=bg.width) continue;
        bg.pixel[i+r][j+c] = clone(this.pixel[i][j]);
      }
    }
  }
  this.at = function(r,c) {
    this.overlay(canvas, r, c);
  }
};


var Canvas = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.grid = cfg.g;
  this.pixel = [];
  this.screen = [];
  this.timeline = [];
  this.interval = [];
  this.sleeptime = 0;

  this.init = function () {
    jQuery(document.body).css('width', this.width*this.grid +'px').css('height', this.heigth*this.grid +'px');

    var pixeldiv = jQuery('<div>').addClass('pixel').css({
      "width": this.grid+'px',
      "height": this.grid+'px',
      "font-size": this.grid*.8+'px',
      "float": "left",
      "text-align": "center"
    });

    for (var i = 0; i < this.height; i++) {
      this.pixel[i] = [];
      this.screen[i] = [];
      for (var j = 0; j < this.width; j++) {
        var p = new Pixel();
        this.pixel[i][j] = p;
        this.screen[i][j] = pixeldiv.clone().addClass('row-'+i).addClass('col-'+j).appendTo(document.body);
      }
    }
    this.timeline.push(this.pixel);
  };
  this.draw = function () {
    this.timeline.push(clone(this.pixel));
    this.interval.push(this.sleeptime);
    this.sleeptime = 0;
  };
  this.flush = function () {
    for (var i = 0; i < this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        this.pixel[i][j] = new Pixel();
      }
    }
  };
  this.sleep = function(time) {
    this.sleeptime = this.sleeptime + time;
  };
  this.play = function(fn) {
    for (var i = 0; i < this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        var p = this.timeline[fn][i][j];
        this.screen[i][j].html(p.chr);
        this.screen[i][j].css('color', p.color);
        this.screen[i][j].css('background-color', p.backgroundColor);
        this.screen[i][j].css('font-family', p.font);

      }
    }
    if (this.interval[fn]!=undefined) setTimeout(function(){
    canvas.play(fn+1); }, this.interval[fn]);
  };
};

var canvas = new Canvas({
  w: 40,
  h: 30,
  g: 20,
});

// a general log function
var consoleLog = function (str) {
    console.log (str);
}

//Convert anything to string

var int2str = function(anything) {
  return String(anything);
};

//Convert string to graph
var str2graph = function (str) {
  str = String(str);
  var height = 1;
  var width = 0;
  var cw = 0;
  for (i in str) {
    if (str[i]=="\n") {
      height++;
      if (cw>width) width = cw;
      cw = 0;
    } else {
      cw++;
    }
  }
  if (cw>width) width = cw;

  var g = new Graph({w: width, h: height});
  var cr = 0, cc = 0;
  for (i in str) {
    if (str[i]=="\n") {
      cr++;
      cc = 0;
    } else {
      g.pixel[cr][cc].chr = str[i];
      cc++;
    }
  }
  return g;
};

//Horizontally attach graphs
var graph_hattach = function(gl, gr) {
  var width = gl.width + gr.width;
  var height = Math.max(gl.height, gr.height);

  var g = new Graph({w: width, h: height});

  for (var i = 0; i < gl.height; i++) {
    for (var j = 0; j < gl.width; j++) {
      g.pixel[i][j] = clone(gl.pixel[i][j]);
    }
  }

  for (var i = 0; i < gr.height; i++) {
    for (var j = 0; j < gr.width; j++) {
      g.pixel[i][j+gl.width] = clone(gr.pixel[i][j]);
    }
  }

  return g;
};

//Vertically attach graphs
var graph_vattach = function(gu, gd) {
  var width = Math.max(gu.width, gd.width);
  var height = gu.height + gd.height;

  var g = new Graph({w: width, h: height});

  for (var i = 0; i < gu.height; i++) {
    for (var j = 0; j < gu.width; j++) {
      g.pixel[i][j] = clone(gu.pixel[i][j]);
    }
  }

  for (var i = 0; i < gd.height; i++) {
    for (var j = 0; j < gd.width; j++) {
      g.pixel[i+gu.height][j] = clone(gd.pixel[i][j]);
    }
  }

  return g;
};

var sleep = function (milliseconds) {
  canvas.sleep(milliseconds);
};
/*
var print_str = function(r, c, str) {
  if (r==undefined || c==undefined || str==undefined) {
    r = 0; c = 0; str = "hello world";
  }
  var g = str2graph(str);
  g.at(r, c);
  canvas.draw();
};
*/

var draw = function() {
  canvas.draw();
};

var flush = function() {
  canvas.flush();
};

var random = function(max) {
  return Math.floor(Math.random()*max);
};

jQuery(document).ready(function(){
  canvas.init();
  try {
    main();
  } catch (e) {
    console.log (e.stack);
  }
  canvas.play(0);
});

>>

//---------------------server template----------------------

befprog_server(client_name) ::= <<


var app = require('express')();
var server = require('http').Server(app);
var io = require('socket.io')(server);
var Fiber = require('fibers');
var extend = require('extend');

var canvas;


server.listen(8888);

app.get('/', function(req, res){
  res.sendFile(__dirname + '/$client_name$.html');
});


var visited = false;
io.on('connection', function (socket) {
  if (!visited) {
    visited = true;
  } else {
    console.log('Multiple connection => server closing');
    process.exit();
  }
  socket.on('disconnect', function(){
    console.log('Client closed => server closing');
    process.exit();
  });
  canvas = new Canvas({
    w: 40,
    h: 30,
    g: 20,
  });
  canvas.init();
  socket.on('keypress', function(data){
    if (typeof keypress != "undefined")
    Fiber(keypress).run(data.key);
  });
  Canvas.prototype.draw = function(){
    socket.emit('draw', this.pixel);
    //console.log('draw!',new Date().getTime());
  };
  Fiber(main).run();
});



var clone = function (a) {
   return JSON.parse(JSON.stringify(a));
};

var Pixel = function() {
  this.chr = '';
  this.color = 'red';
  this.backgroundColor = '#FFC';
  this.font = 'Monaco';
};

var initArray = function(dimens) {
    nextDimen = [];

    for (var j = dimens.length - 2; j >= 0; j--) {
        curDimen = [];
        var n = parseInt(dimens[j]);
        for (var k = 0; k < n; k++) {
            curDimen.push(extend(true, [], nextDimen));
        }
        nextDimen = curDimen;
    }

    return nextDimen;
}

var makeStruct = function(names) {
  var names = names.split(' ');
  var count = names.length;
  function constructor() {
    for (var i = 0; i < count; i++) {
      if (names[i].indexOf("[") != -1)
      {
          varName = names[i].substring(0, names[i].indexOf("["));
          tmp = names[i].substring(names[i].indexOf("[") + 1, names[i].length - 1);
          dimens = tmp.split("][");

          this[varName] = initArray(dimens);
      }
      else {
          this[names[i]] = null;
      }
    }
  }
  return constructor;
}

var Graph = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.pixel = [];
  for (var i = 0; i < this.height; i++) {
    this.pixel[i] = [];
    for (var j = 0; j < this.width; j++) {
      this.pixel[i][j] = new Pixel();
    }
  }
  this.overlay = function(bg, r, c) {
    for (var i = 0; i <this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        if (i+r>=bg.height || j+c>=bg.width) continue;
        bg.pixel[i+r][j+c] = clone(this.pixel[i][j]);
      }
    }
  }
  this.at = function(r,c) {
    this.overlay(canvas, r, c);
  }
};


var Canvas = function(cfg) {
  this.width = cfg.w;
  this.height = cfg.h;
  this.grid = cfg.g;
  this.pixel = [];

  this.init = function () {

    for (var i = 0; i < this.height; i++) {
      this.pixel[i] = [];
      for (var j = 0; j < this.width; j++) {
        var p = new Pixel();
        this.pixel[i][j] = p;
      }
    }
  };

  this.flush = function () {
    for (var i = 0; i < this.height; i++) {
      for (var j = 0; j < this.width; j++) {
        this.pixel[i][j] = new Pixel();
      }
    }
  };
};

// a general log function
var consoleLog = function (str) {
    console.log (str);
}

//Convert anything to string

var int2str = function(anything) {
  return String(anything);
};

//Convert string to graph
var str2graph = function (str) {
  str = String(str);
  var height = 1;
  var width = 0;
  var cw = 0;
  for (i in str) {
    if (str[i]=="\n") {
      height++;
      if (cw>width) width = cw;
      cw = 0;
    } else {
      cw++;
    }
  }
  if (cw>width) width = cw;

  var g = new Graph({w: width, h: height});
  var cr = 0, cc = 0;
  for (i in str) {
    if (str[i]=="\n") {
      cr++;
      cc = 0;
    } else {
      g.pixel[cr][cc].chr = str[i];
      cc++;
    }
  }
  return g;
};

//Horizontally attach graphs
var graph_hattach = function(gl, gr) {
  var width = gl.width + gr.width;
  var height = Math.max(gl.height, gr.height);

  var g = new Graph({w: width, h: height});

  for (var i = 0; i < gl.height; i++) {
    for (var j = 0; j < gl.width; j++) {
      g.pixel[i][j] = clone(gl.pixel[i][j]);
    }
  }

  for (var i = 0; i < gr.height; i++) {
    for (var j = 0; j < gr.width; j++) {
      g.pixel[i][j+gl.width] = clone(gr.pixel[i][j]);
    }
  }

  return g;
};

//Vertically attach graphs
var graph_vattach = function(gu, gd) {
  var width = Math.max(gu.width, gd.width);
  var height = gu.height + gd.height;

  var g = new Graph({w: width, h: height});

  for (var i = 0; i < gu.height; i++) {
    for (var j = 0; j < gu.width; j++) {
      g.pixel[i][j] = clone(gu.pixel[i][j]);
    }
  }

  for (var i = 0; i < gd.height; i++) {
    for (var j = 0; j < gd.width; j++) {
      g.pixel[i+gu.height][j] = clone(gd.pixel[i][j]);
    }
  }

  return g;
};

var sleep = function (ms) {
  var fiber = Fiber.current;
  setTimeout(function() {
    fiber.run();
  }, ms);
  Fiber.yield();
};


/*
var print_str = function(r, c, str) {
  if (r==undefined || c==undefined || str==undefined) {
    r = 0; c = 0; str = "hello world";
  }
  var g = str2graph(str);
  g.at(r, c);
  canvas.draw();
};
*/

var draw = function() {
  canvas.draw();
};

var flush = function() {
  canvas.flush();
};

var random = function(max) {
  return Math.floor(Math.random()*max);
};

>>
