delimiters "$", "$"
// change delimiters to $
typeInitMap ::= [
    "int":      "0",
    "float":    "0.0",
    "bool":     "false",
    default:    "null" // anything other than an atomic type
]

assign(lhs, rhs) ::= "$lhs$ = $rhs$;"
add(lhs, rhs) ::= "$lhs$ + $rhs$;"

funcdef(fname, params, body) ::= <<
var $fname$ = function($params; separator=", "$) {
    $body; separator="\n"$
};
>>

funccall(fname, params) ::= <<$fname$($params; separator=", "$);>>

vardecl(vtype, vname, value) ::= "var $vname$$init(value)$;"

init(value) ::= "$if(value)$ = $value$$endif$"

befprog() ::= <<
<html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript">
var canvas = {
  width: 40,
  height: 30,
  buffer: [],
  draw: function () {
    for (var i = 0; i < canvas.height; i++) {
      for (var j = 0; j < canvas.width; j++) {
        var p = this.buffer[i][j];
        p.div.html(p.chr);
      }
    }
  }
};

var Pixel = function() {
  this.chr = '';
};

var pixeldiv = jQuery('<div>').addClass('pixel').css({
  "width": "20px",
  "height": "20px",
  "font-size": "14px",
  "float": "left",
  "text-align": "center",
  "background-color": "#CFF"
});

var graph = function(w, h) {
  this.buffer = [];
  this.w = w;
  this.h = h;
  for (var i = 0; i < this.h; i++) {
    this.buffer[i] = [];
    for (var j = 0; j < this.w; j++) {
      this.buffer[i][j] = new Pixel();
    }
  }
  this.at = function(r,c) {
    for (var i = 0; i <this.h; i++) {
      for (var j = 0; j < this.w; j++) {
        canvas.buffer[i+r][j+c].chr = this.buffer[i][j].chr;
      }
    }
  }
}


var init = function() {
  jQuery(document.body).css('width', canvas.width*20 +'px').css('height', canvas.height*20 +'px');
  for (var i = 0; i < canvas.height; i++) {
    canvas.buffer[i] = [];
    for (var j = 0; j < canvas.width; j++) {
      var p = new Pixel();
      p.div = pixeldiv.clone().addClass('row-'+i).addClass('col-'+j).appendTo(document.body);
      canvas.buffer[i][j] = p;
    }
  }
};

//Convert string to graph
var str2graph = function (str) {
  str = String(str);
  var g = new graph(str.length, 1);
  for (i in str) {
    var cr = 0, cc = Number(i);
    g.buffer[cr][cc].chr = str[i];
  }
  return g;
}

var sleep = function (milliseconds) {
/*
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
        if ((new Date().getTime() - start) > milliseconds){
            break;
        }
    }
*/
}

var print_str = function(r, c, str) {
  if (r==undefined || c==undefined || str==undefined) {
    r = 0; c = 0; str = "hello world";
  }
  var g = str2graph(str);
  g.at(r, c);
  canvas.draw();
};

>>

aftprog() ::= <<
jQuery(document).ready(function(){
  init();
  main();
});
</script>
<body>
</body>
</html>
>>
